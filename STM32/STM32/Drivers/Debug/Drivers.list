
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a14  08000a14  00010a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a20  08000a20  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  08000a20  08000a20  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a20  08000a20  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a20  08000a20  00010a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a24  08000a24  00010a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08000a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  200000e8  08000b10  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08000b10  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f79  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a10  00000000  00000000  0002408a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009bc  00000000  00000000  00024a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b0  00000000  00000000  00025458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  00025608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000091f  00000000  00000000  00025758  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001fa6  00000000  00000000  00026077  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000800c  00000000  00000000  0002801d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00030029  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000514  00000000  00000000  000300a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000e8 	.word	0x200000e8
 800014c:	00000000 	.word	0x00000000
 8000150:	080009fc 	.word	0x080009fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000ec 	.word	0x200000ec
 800016c:	080009fc 	.word	0x080009fc

08000170 <delay_ms>:


/************************************************************/
/* Helper Functions */

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
			;
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_SendCommand>:
/* Helper function to send command to LCD */
static void LCD_SendCommand(uint8_t cmd)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	71fb      	strb	r3, [r7, #7]
	/* R/S --> LOW  command register */
	MCAL_GPIO_WritePin(LCD_REG ,LCD_CNT_RS_PIN, LOW);
 80001b2:	2200      	movs	r2, #0
 80001b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b8:	4838      	ldr	r0, [pc, #224]	; (800029c <LCD_SendCommand+0xf4>)
 80001ba:	f000 fb67 	bl	800088c <MCAL_GPIO_WritePin>

	/* R/W --> LOW  Write */
	MCAL_GPIO_WritePin(LCD_REG , LCD_CNT_RW_PIN, LOW);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c4:	4835      	ldr	r0, [pc, #212]	; (800029c <LCD_SendCommand+0xf4>)
 80001c6:	f000 fb61 	bl	800088c <MCAL_GPIO_WritePin>

	/* Set E pin to high */
	MCAL_GPIO_WritePin(LCD_REG , LCD_CNT_E_PIN, HIGH);
 80001ca:	2201      	movs	r2, #1
 80001cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d0:	4832      	ldr	r0, [pc, #200]	; (800029c <LCD_SendCommand+0xf4>)
 80001d2:	f000 fb5b 	bl	800088c <MCAL_GPIO_WritePin>

	/* 4 bit Mode*/
#elif (LCD_OP_MODE == LCD_CMD_8_BIT_MODE)

	/* Write data pins */
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_0, GET_BIT(cmd, 0));
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	f003 0301 	and.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	461a      	mov	r2, r3
 80001e0:	2101      	movs	r1, #1
 80001e2:	482e      	ldr	r0, [pc, #184]	; (800029c <LCD_SendCommand+0xf4>)
 80001e4:	f000 fb52 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_1, GET_BIT(cmd, 1));
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	105b      	asrs	r3, r3, #1
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0301 	and.w	r3, r3, #1
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	461a      	mov	r2, r3
 80001f6:	2102      	movs	r1, #2
 80001f8:	4828      	ldr	r0, [pc, #160]	; (800029c <LCD_SendCommand+0xf4>)
 80001fa:	f000 fb47 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_2, GET_BIT(cmd, 2));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	109b      	asrs	r3, r3, #2
 8000202:	b2db      	uxtb	r3, r3
 8000204:	f003 0301 	and.w	r3, r3, #1
 8000208:	b2db      	uxtb	r3, r3
 800020a:	461a      	mov	r2, r3
 800020c:	2104      	movs	r1, #4
 800020e:	4823      	ldr	r0, [pc, #140]	; (800029c <LCD_SendCommand+0xf4>)
 8000210:	f000 fb3c 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_3, GET_BIT(cmd, 3));
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	10db      	asrs	r3, r3, #3
 8000218:	b2db      	uxtb	r3, r3
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	461a      	mov	r2, r3
 8000222:	2108      	movs	r1, #8
 8000224:	481d      	ldr	r0, [pc, #116]	; (800029c <LCD_SendCommand+0xf4>)
 8000226:	f000 fb31 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_4, GET_BIT(cmd, 4));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	111b      	asrs	r3, r3, #4
 800022e:	b2db      	uxtb	r3, r3
 8000230:	f003 0301 	and.w	r3, r3, #1
 8000234:	b2db      	uxtb	r3, r3
 8000236:	461a      	mov	r2, r3
 8000238:	2110      	movs	r1, #16
 800023a:	4818      	ldr	r0, [pc, #96]	; (800029c <LCD_SendCommand+0xf4>)
 800023c:	f000 fb26 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_5, GET_BIT(cmd, 5));
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	115b      	asrs	r3, r3, #5
 8000244:	b2db      	uxtb	r3, r3
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	b2db      	uxtb	r3, r3
 800024c:	461a      	mov	r2, r3
 800024e:	2120      	movs	r1, #32
 8000250:	4812      	ldr	r0, [pc, #72]	; (800029c <LCD_SendCommand+0xf4>)
 8000252:	f000 fb1b 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_6, GET_BIT(cmd, 6));
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	119b      	asrs	r3, r3, #6
 800025a:	b2db      	uxtb	r3, r3
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	b2db      	uxtb	r3, r3
 8000262:	461a      	mov	r2, r3
 8000264:	2140      	movs	r1, #64	; 0x40
 8000266:	480d      	ldr	r0, [pc, #52]	; (800029c <LCD_SendCommand+0xf4>)
 8000268:	f000 fb10 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_7, GET_BIT(cmd, 7));
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	09db      	lsrs	r3, r3, #7
 8000270:	b2db      	uxtb	r3, r3
 8000272:	461a      	mov	r2, r3
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	4809      	ldr	r0, [pc, #36]	; (800029c <LCD_SendCommand+0xf4>)
 8000278:	f000 fb08 	bl	800088c <MCAL_GPIO_WritePin>

#endif

	delay_ms(1);
 800027c:	2001      	movs	r0, #1
 800027e:	f7ff ff77 	bl	8000170 <delay_ms>

	/* Set E pin to low */
	MCAL_GPIO_WritePin(LCD_REG , LCD_CNT_E_PIN, LOW);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <LCD_SendCommand+0xf4>)
 800028a:	f000 faff 	bl	800088c <MCAL_GPIO_WritePin>

	delay_ms(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff6e 	bl	8000170 <delay_ms>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40010800 	.word	0x40010800

080002a0 <LCD_SendData>:

/* Helper funcation to send Data to LCD */
static void LCD_SendData(uint8_t cmd)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	/* R/S --> High  Data register */
	MCAL_GPIO_WritePin(LCD_REG , LCD_CNT_RS_PIN, HIGH);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b0:	4838      	ldr	r0, [pc, #224]	; (8000394 <LCD_SendData+0xf4>)
 80002b2:	f000 faeb 	bl	800088c <MCAL_GPIO_WritePin>

	/* R/W --> LOW  Write */
	MCAL_GPIO_WritePin(LCD_REG , LCD_CNT_RW_PIN, LOW);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002bc:	4835      	ldr	r0, [pc, #212]	; (8000394 <LCD_SendData+0xf4>)
 80002be:	f000 fae5 	bl	800088c <MCAL_GPIO_WritePin>

	/* Set E pin to high */
	MCAL_GPIO_WritePin(LCD_REG , LCD_CNT_E_PIN, HIGH);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c8:	4832      	ldr	r0, [pc, #200]	; (8000394 <LCD_SendData+0xf4>)
 80002ca:	f000 fadf 	bl	800088c <MCAL_GPIO_WritePin>
	/* 8 bit Mode*/

#elif (LCD_OP_MODE == LCD_CMD_8_BIT_MODE)

	/* Write data pins */
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_0, GET_BIT(cmd, 0));
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	2101      	movs	r1, #1
 80002da:	482e      	ldr	r0, [pc, #184]	; (8000394 <LCD_SendData+0xf4>)
 80002dc:	f000 fad6 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_1, GET_BIT(cmd, 1));
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	105b      	asrs	r3, r3, #1
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	461a      	mov	r2, r3
 80002ee:	2102      	movs	r1, #2
 80002f0:	4828      	ldr	r0, [pc, #160]	; (8000394 <LCD_SendData+0xf4>)
 80002f2:	f000 facb 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_2, GET_BIT(cmd, 2));
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	109b      	asrs	r3, r3, #2
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	461a      	mov	r2, r3
 8000304:	2104      	movs	r1, #4
 8000306:	4823      	ldr	r0, [pc, #140]	; (8000394 <LCD_SendData+0xf4>)
 8000308:	f000 fac0 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_3, GET_BIT(cmd, 3));
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	10db      	asrs	r3, r3, #3
 8000310:	b2db      	uxtb	r3, r3
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	b2db      	uxtb	r3, r3
 8000318:	461a      	mov	r2, r3
 800031a:	2108      	movs	r1, #8
 800031c:	481d      	ldr	r0, [pc, #116]	; (8000394 <LCD_SendData+0xf4>)
 800031e:	f000 fab5 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_4, GET_BIT(cmd, 4));
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	111b      	asrs	r3, r3, #4
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	461a      	mov	r2, r3
 8000330:	2110      	movs	r1, #16
 8000332:	4818      	ldr	r0, [pc, #96]	; (8000394 <LCD_SendData+0xf4>)
 8000334:	f000 faaa 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_5, GET_BIT(cmd, 5));
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	115b      	asrs	r3, r3, #5
 800033c:	b2db      	uxtb	r3, r3
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	2120      	movs	r1, #32
 8000348:	4812      	ldr	r0, [pc, #72]	; (8000394 <LCD_SendData+0xf4>)
 800034a:	f000 fa9f 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_6, GET_BIT(cmd, 6));
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	119b      	asrs	r3, r3, #6
 8000352:	b2db      	uxtb	r3, r3
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	b2db      	uxtb	r3, r3
 800035a:	461a      	mov	r2, r3
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	480d      	ldr	r0, [pc, #52]	; (8000394 <LCD_SendData+0xf4>)
 8000360:	f000 fa94 	bl	800088c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_REG , LCD_DATA_PIN_7, GET_BIT(cmd, 7));
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	09db      	lsrs	r3, r3, #7
 8000368:	b2db      	uxtb	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	2180      	movs	r1, #128	; 0x80
 800036e:	4809      	ldr	r0, [pc, #36]	; (8000394 <LCD_SendData+0xf4>)
 8000370:	f000 fa8c 	bl	800088c <MCAL_GPIO_WritePin>

#endif

	delay_ms(1);
 8000374:	2001      	movs	r0, #1
 8000376:	f7ff fefb 	bl	8000170 <delay_ms>

	/* Set E pin to low */
	MCAL_GPIO_WritePin(LCD_REG , LCD_CNT_E_PIN, LOW);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <LCD_SendData+0xf4>)
 8000382:	f000 fa83 	bl	800088c <MCAL_GPIO_WritePin>

	delay_ms(5);
 8000386:	2005      	movs	r0, #5
 8000388:	f7ff fef2 	bl	8000170 <delay_ms>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40010800 	.word	0x40010800

08000398 <LCD_Init>:

void LCD_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0

	/* Send Operation mode*/
	LCD_SendCommand(LCD_OP_MODE);
 800039c:	2038      	movs	r0, #56	; 0x38
 800039e:	f7ff ff03 	bl	80001a8 <LCD_SendCommand>
	delay_ms(10);
 80003a2:	200a      	movs	r0, #10
 80003a4:	f7ff fee4 	bl	8000170 <delay_ms>

	/* Send entery mode*/
	LCD_SendCommand(LCD_ENTRY_MODE);
 80003a8:	2006      	movs	r0, #6
 80003aa:	f7ff fefd 	bl	80001a8 <LCD_SendCommand>
	delay_ms(10);
 80003ae:	200a      	movs	r0, #10
 80003b0:	f7ff fede 	bl	8000170 <delay_ms>

	/* Send display mode command*/
	LCD_SendCommand(LCD_DISPLAY_MODE);
 80003b4:	200f      	movs	r0, #15
 80003b6:	f7ff fef7 	bl	80001a8 <LCD_SendCommand>
	delay_ms(10);
 80003ba:	200a      	movs	r0, #10
 80003bc:	f7ff fed8 	bl	8000170 <delay_ms>

	/* Clear the LCD and return home */
	LCD_SendCommand(LCD_CMD_CLEAR_DISPLAY);
 80003c0:	2001      	movs	r0, #1
 80003c2:	f7ff fef1 	bl	80001a8 <LCD_SendCommand>
	delay_ms(10);
 80003c6:	200a      	movs	r0, #10
 80003c8:	f7ff fed2 	bl	8000170 <delay_ms>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <LCD_ClearDisplay>:

/* Clear the LCD and return home */
void LCD_ClearDisplay(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_CMD_CLEAR_DISPLAY);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f7ff fee7 	bl	80001a8 <LCD_SendCommand>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}

080003de <LCD_WriteChar>:

void LCD_WriteChar(char ch, uint8_t row, uint8_t col)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	4603      	mov	r3, r0
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	460b      	mov	r3, r1
 80003ea:	71bb      	strb	r3, [r7, #6]
 80003ec:	4613      	mov	r3, r2
 80003ee:	717b      	strb	r3, [r7, #5]
	if (row == 0)
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d106      	bne.n	8000404 <LCD_WriteChar+0x26>
	{
		LCD_SendCommand(LCD_CMD_SET_DDRAM + col);
 80003f6:	797b      	ldrb	r3, [r7, #5]
 80003f8:	3b80      	subs	r3, #128	; 0x80
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff fed3 	bl	80001a8 <LCD_SendCommand>
 8000402:	e008      	b.n	8000416 <LCD_WriteChar+0x38>
	}
	else if (row == 1)
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d105      	bne.n	8000416 <LCD_WriteChar+0x38>
	{
		LCD_SendCommand(LCD_CMD_SET_DDRAM + 0x40 + col);
 800040a:	797b      	ldrb	r3, [r7, #5]
 800040c:	3b40      	subs	r3, #64	; 0x40
 800040e:	b2db      	uxtb	r3, r3
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff fec9 	bl	80001a8 <LCD_SendCommand>
	}

	LCD_SendData(ch);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ff41 	bl	80002a0 <LCD_SendData>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <LCD_WriteString>:

void LCD_WriteString(char *str, uint8_t len, uint8_t row, uint8_t col)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b084      	sub	sp, #16
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	4608      	mov	r0, r1
 8000430:	4611      	mov	r1, r2
 8000432:	461a      	mov	r2, r3
 8000434:	4603      	mov	r3, r0
 8000436:	70fb      	strb	r3, [r7, #3]
 8000438:	460b      	mov	r3, r1
 800043a:	70bb      	strb	r3, [r7, #2]
 800043c:	4613      	mov	r3, r2
 800043e:	707b      	strb	r3, [r7, #1]

	for (uint8_t index = 0; index < len; index++)
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e00e      	b.n	8000464 <LCD_WriteString+0x3e>
	{
		LCD_WriteChar(str[index], row, col + index);
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4413      	add	r3, r2
 800044c:	7818      	ldrb	r0, [r3, #0]
 800044e:	787a      	ldrb	r2, [r7, #1]
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	4413      	add	r3, r2
 8000454:	b2da      	uxtb	r2, r3
 8000456:	78bb      	ldrb	r3, [r7, #2]
 8000458:	4619      	mov	r1, r3
 800045a:	f7ff ffc0 	bl	80003de <LCD_WriteChar>
	for (uint8_t index = 0; index < len; index++)
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	3301      	adds	r3, #1
 8000462:	73fb      	strb	r3, [r7, #15]
 8000464:	7bfa      	ldrb	r2, [r7, #15]
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	429a      	cmp	r2, r3
 800046a:	d3ec      	bcc.n	8000446 <LCD_WriteString+0x20>
	}
}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <EXTI0_IRQHandler>:

/*************************************************************
 *  ISR Handler
 *************************************************************/
void EXTI0_IRQHandler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	/* Clear pending bit for IRQ by 1 */
	EXTI->PR |= (1<<0);
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <EXTI0_IRQHandler+0x1c>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <EXTI0_IRQHandler+0x1c>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6153      	str	r3, [r2, #20]
	/* IRQ  Callback*/
	GP_IRQ_CallBack[0]();
 8000484:	4b03      	ldr	r3, [pc, #12]	; (8000494 <EXTI0_IRQHandler+0x20>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4798      	blx	r3
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40010400 	.word	0x40010400
 8000494:	20000104 	.word	0x20000104

08000498 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	/* Clear pending bit for IRQ by 1 */
	EXTI->PR |= (1<<1);
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <EXTI1_IRQHandler+0x1c>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <EXTI1_IRQHandler+0x1c>)
 80004a2:	f043 0302 	orr.w	r3, r3, #2
 80004a6:	6153      	str	r3, [r2, #20]
	/* IRQ  Callback*/
	GP_IRQ_CallBack[1]();
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <EXTI1_IRQHandler+0x20>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4798      	blx	r3
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40010400 	.word	0x40010400
 80004b8:	20000104 	.word	0x20000104

080004bc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	/* Clear pending bit for IRQ by 1 */
	EXTI->PR |= (1<<2);
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <EXTI2_IRQHandler+0x1c>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <EXTI2_IRQHandler+0x1c>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6153      	str	r3, [r2, #20]
	/* IRQ  Callback*/
	GP_IRQ_CallBack[3]();
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <EXTI2_IRQHandler+0x20>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4798      	blx	r3
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40010400 	.word	0x40010400
 80004dc:	20000104 	.word	0x20000104

080004e0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	/* Clear pending bit for IRQ by 1 */
	EXTI->PR |= (1<<3);
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <EXTI3_IRQHandler+0x1c>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <EXTI3_IRQHandler+0x1c>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6153      	str	r3, [r2, #20]
	/* IRQ  Callback*/
	GP_IRQ_CallBack[3]();
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <EXTI3_IRQHandler+0x20>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	4798      	blx	r3
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40010400 	.word	0x40010400
 8000500:	20000104 	.word	0x20000104

08000504 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	/* Clear pending bit for IRQ by 1 */
	EXTI->PR |= (1<<4);
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <EXTI4_IRQHandler+0x1c>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <EXTI4_IRQHandler+0x1c>)
 800050e:	f043 0310 	orr.w	r3, r3, #16
 8000512:	6153      	str	r3, [r2, #20]
	/* IRQ  Callback*/
	GP_IRQ_CallBack[4]();
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <EXTI4_IRQHandler+0x20>)
 8000516:	691b      	ldr	r3, [r3, #16]
 8000518:	4798      	blx	r3
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40010400 	.word	0x40010400
 8000524:	20000104 	.word	0x20000104

08000528 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { EXTI->PR |= (1<<5) ; 	GP_IRQ_CallBack[5](); }
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f003 0320 	and.w	r3, r3, #32
 8000534:	2b00      	cmp	r3, #0
 8000536:	d008      	beq.n	800054a <EXTI9_5_IRQHandler+0x22>
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6153      	str	r3, [r2, #20]
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) { EXTI->PR |= (1<<6); 	GP_IRQ_CallBack[6](); }
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000552:	2b00      	cmp	r3, #0
 8000554:	d008      	beq.n	8000568 <EXTI9_5_IRQHandler+0x40>
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) { EXTI->PR |= (1<<7); 	GP_IRQ_CallBack[7](); }
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000570:	2b00      	cmp	r3, #0
 8000572:	d008      	beq.n	8000586 <EXTI9_5_IRQHandler+0x5e>
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800057a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057e:	6153      	str	r3, [r2, #20]
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) { EXTI->PR |= (1<<8); 	GP_IRQ_CallBack[8](); }
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800058e:	2b00      	cmp	r3, #0
 8000590:	d008      	beq.n	80005a4 <EXTI9_5_IRQHandler+0x7c>
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 80005a0:	6a1b      	ldr	r3, [r3, #32]
 80005a2:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) { EXTI->PR |= (1<<9); 	GP_IRQ_CallBack[9](); }
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d008      	beq.n	80005c2 <EXTI9_5_IRQHandler+0x9a>
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 80005b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ba:	6153      	str	r3, [r2, #20]
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 80005be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c0:	4798      	blx	r3

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40010400 	.word	0x40010400
 80005cc:	20000104 	.word	0x20000104

080005d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

	if(EXTI->PR & (1<<11)) { EXTI->PR |= (1<<11); 	GP_IRQ_CallBack[11](); }
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d008      	beq.n	80005f2 <EXTI15_10_IRQHandler+0x22>
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a22      	ldr	r2, [pc, #136]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 80005e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <EXTI15_10_IRQHandler+0xa4>)
 80005ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f0:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) { EXTI->PR |= (1<<12); 	GP_IRQ_CallBack[12](); }
 80005f2:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <EXTI15_10_IRQHandler+0x40>
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 8000604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <EXTI15_10_IRQHandler+0xa4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) { EXTI->PR |= (1<<13); 	GP_IRQ_CallBack[13](); }
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000618:	2b00      	cmp	r3, #0
 800061a:	d008      	beq.n	800062e <EXTI15_10_IRQHandler+0x5e>
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 8000622:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000626:	6153      	str	r3, [r2, #20]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <EXTI15_10_IRQHandler+0xa4>)
 800062a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062c:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) { EXTI->PR |= (1<<14); 	GP_IRQ_CallBack[14](); }
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d008      	beq.n	800064c <EXTI15_10_IRQHandler+0x7c>
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 8000640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <EXTI15_10_IRQHandler+0xa4>)
 8000648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800064a:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) { EXTI->PR |= (1<<15) ; 	GP_IRQ_CallBack[15](); }
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d008      	beq.n	800066a <EXTI15_10_IRQHandler+0x9a>
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <EXTI15_10_IRQHandler+0xa0>)
 800065e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000662:	6153      	str	r3, [r2, #20]
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <EXTI15_10_IRQHandler+0xa4>)
 8000666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000668:	4798      	blx	r3

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40010400 	.word	0x40010400
 8000674:	20000104 	.word	0x20000104

08000678 <GET_CRLH_POSTION>:
/*************************************************************/

/* APIs Supported by "MCAL GPIO DRIVER"*/

uint8_t GET_CRLH_POSTION(uint16_t PinNum)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
	switch (PinNum)
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	2b80      	cmp	r3, #128	; 0x80
 8000686:	d042      	beq.n	800070e <GET_CRLH_POSTION+0x96>
 8000688:	2b80      	cmp	r3, #128	; 0x80
 800068a:	dc11      	bgt.n	80006b0 <GET_CRLH_POSTION+0x38>
 800068c:	2b08      	cmp	r3, #8
 800068e:	d036      	beq.n	80006fe <GET_CRLH_POSTION+0x86>
 8000690:	2b08      	cmp	r3, #8
 8000692:	dc06      	bgt.n	80006a2 <GET_CRLH_POSTION+0x2a>
 8000694:	2b02      	cmp	r3, #2
 8000696:	d02e      	beq.n	80006f6 <GET_CRLH_POSTION+0x7e>
 8000698:	2b04      	cmp	r3, #4
 800069a:	d02e      	beq.n	80006fa <GET_CRLH_POSTION+0x82>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d028      	beq.n	80006f2 <GET_CRLH_POSTION+0x7a>
 80006a0:	e047      	b.n	8000732 <GET_CRLH_POSTION+0xba>
 80006a2:	2b20      	cmp	r3, #32
 80006a4:	d02f      	beq.n	8000706 <GET_CRLH_POSTION+0x8e>
 80006a6:	2b40      	cmp	r3, #64	; 0x40
 80006a8:	d02f      	beq.n	800070a <GET_CRLH_POSTION+0x92>
 80006aa:	2b10      	cmp	r3, #16
 80006ac:	d029      	beq.n	8000702 <GET_CRLH_POSTION+0x8a>
 80006ae:	e040      	b.n	8000732 <GET_CRLH_POSTION+0xba>
 80006b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006b4:	d033      	beq.n	800071e <GET_CRLH_POSTION+0xa6>
 80006b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ba:	dc09      	bgt.n	80006d0 <GET_CRLH_POSTION+0x58>
 80006bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006c0:	d029      	beq.n	8000716 <GET_CRLH_POSTION+0x9e>
 80006c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006c6:	d028      	beq.n	800071a <GET_CRLH_POSTION+0xa2>
 80006c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006cc:	d021      	beq.n	8000712 <GET_CRLH_POSTION+0x9a>
 80006ce:	e030      	b.n	8000732 <GET_CRLH_POSTION+0xba>
 80006d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d4:	d027      	beq.n	8000726 <GET_CRLH_POSTION+0xae>
 80006d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006da:	dc03      	bgt.n	80006e4 <GET_CRLH_POSTION+0x6c>
 80006dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006e0:	d01f      	beq.n	8000722 <GET_CRLH_POSTION+0xaa>
 80006e2:	e026      	b.n	8000732 <GET_CRLH_POSTION+0xba>
 80006e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006e8:	d01f      	beq.n	800072a <GET_CRLH_POSTION+0xb2>
 80006ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006ee:	d01e      	beq.n	800072e <GET_CRLH_POSTION+0xb6>
 80006f0:	e01f      	b.n	8000732 <GET_CRLH_POSTION+0xba>
	{
	case GPIO_PIN0:
		return 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e01e      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	e01c      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 80006fa:	2308      	movs	r3, #8
 80006fc:	e01a      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 80006fe:	230c      	movs	r3, #12
 8000700:	e018      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 8000702:	2310      	movs	r3, #16
 8000704:	e016      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 8000706:	2314      	movs	r3, #20
 8000708:	e014      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 800070a:	2318      	movs	r3, #24
 800070c:	e012      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 800070e:	231c      	movs	r3, #28
 8000710:	e010      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 8000712:	2300      	movs	r3, #0
 8000714:	e00e      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 8000716:	2304      	movs	r3, #4
 8000718:	e00c      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 800071a:	2308      	movs	r3, #8
 800071c:	e00a      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 800071e:	230c      	movs	r3, #12
 8000720:	e008      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 8000722:	2310      	movs	r3, #16
 8000724:	e006      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 8000726:	2314      	movs	r3, #20
 8000728:	e004      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 800072a:	2318      	movs	r3, #24
 800072c:	e002      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 800072e:	231c      	movs	r3, #28
 8000730:	e000      	b.n	8000734 <GET_CRLH_POSTION+0xbc>
		break;
	}

	return 1;
 8000732:	2301      	movs	r3, #1
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <MCAL_GPIO_Init>:
 *   @brief - initlize pin Mode , Speed
 *   @retval - none
 *   @Note - Port c and d are partial in stm32f10x8
 */
void MCAL_GPIO_Init(GPIOx_t *GPIOx, GPIO_Pinconfig_t *PinConfig)
{
 800073e:	b590      	push	{r4, r7, lr}
 8000740:	b085      	sub	sp, #20
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
	uint8_t Pin_CNF_MOD;
	/* check Low or high configuration register*/
	volatile uint32_t *ConfigRegister = NULL;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
	(PinConfig->PinNum < GPIO_PIN8) ? (ConfigRegister = &GPIOx->CRL) : (ConfigRegister = &GPIOx->CRH);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	2bff      	cmp	r3, #255	; 0xff
 8000752:	d802      	bhi.n	800075a <MCAL_GPIO_Init+0x1c>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	e002      	b.n	8000760 <MCAL_GPIO_Init+0x22>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3304      	adds	r3, #4
 800075e:	60bb      	str	r3, [r7, #8]

	/*Clear CNF and MOD bits */
	(*ConfigRegister) &= ~(0xff << GET_CRLH_POSTION(PinConfig->PinNum));
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff87 	bl	8000678 <GET_CRLH_POSTION>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	23ff      	movs	r3, #255	; 0xff
 8000770:	4093      	lsls	r3, r2
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	401a      	ands	r2, r3
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	601a      	str	r2, [r3, #0]

	/*CHeck Input or Output*/
	if ((PinConfig->PinMode == GPIO_MODE_OUTPUT_PP) || (PinConfig->PinMode == GPIO_MODE_OUTPUT_OD) || (PinConfig->PinMode == GPIO_MODE_AF_PP) || (PinConfig->PinMode == GPIO_MODE_AF_OD))
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	7a1b      	ldrb	r3, [r3, #8]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d00b      	beq.n	800079e <MCAL_GPIO_Init+0x60>
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	7a1b      	ldrb	r3, [r3, #8]
 800078a:	2b05      	cmp	r3, #5
 800078c:	d007      	beq.n	800079e <MCAL_GPIO_Init+0x60>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	7a1b      	ldrb	r3, [r3, #8]
 8000792:	2b06      	cmp	r3, #6
 8000794:	d003      	beq.n	800079e <MCAL_GPIO_Init+0x60>
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	7a1b      	ldrb	r3, [r3, #8]
 800079a:	2b07      	cmp	r3, #7
 800079c:	d10e      	bne.n	80007bc <MCAL_GPIO_Init+0x7e>
	{
		/* Output */
		/*Set CNF and Mod bits*/
		Pin_CNF_MOD = ((((PinConfig->PinMode - 4) << 2) | (PinConfig->PinSpeed)) & 0x0f);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	7a1b      	ldrb	r3, [r3, #8]
 80007a2:	3b04      	subs	r3, #4
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	b25a      	sxtb	r2, r3
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	7a5b      	ldrb	r3, [r3, #9]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	f003 030f 	and.w	r3, r3, #15
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	e028      	b.n	800080e <MCAL_GPIO_Init+0xd0>
	}
	else
	{
		/*Input*/
		if ((PinConfig->PinMode == GPIO_MODE_INPUT_FLOAT) || (PinConfig->PinMode == GPIO_MODE_INPUT_ANALOG))
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	7a1b      	ldrb	r3, [r3, #8]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d003      	beq.n	80007cc <MCAL_GPIO_Init+0x8e>
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	7a1b      	ldrb	r3, [r3, #8]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d107      	bne.n	80007dc <MCAL_GPIO_Init+0x9e>
		{
			/*Set CNF and Mod bits*/
			Pin_CNF_MOD = (((PinConfig->PinMode << 2) | 0x0) & 0x0f);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	7a1b      	ldrb	r3, [r3, #8]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	f003 030f 	and.w	r3, r3, #15
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e018      	b.n	800080e <MCAL_GPIO_Init+0xd0>
		}
		else
		{
			/*Set CNF and Mod bits*/
			Pin_CNF_MOD = (((GPIO_MODE_INPUT_PU << 2) | 0x0) & 0x0f);
 80007dc:	2308      	movs	r3, #8
 80007de:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->PinMode == GPIO_MODE_INPUT_PU)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	7a1b      	ldrb	r3, [r3, #8]
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d106      	bne.n	80007f6 <MCAL_GPIO_Init+0xb8>
			{
				/* 1 on ODR for Pull up*/
				GPIOx->ODR |= PinConfig->PinNum;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60da      	str	r2, [r3, #12]
			}
			if (PinConfig->PinMode == GPIO_MODE_INPUT_PU)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	7a1b      	ldrb	r3, [r3, #8]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d107      	bne.n	800080e <MCAL_GPIO_Init+0xd0>
			{
				/* 0 on ODR for Pull down*/
				GPIOx->ODR &= ~(PinConfig->PinNum);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	8812      	ldrh	r2, [r2, #0]
 8000806:	43d2      	mvns	r2, r2
 8000808:	401a      	ands	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*ConfigRegister) |= (Pin_CNF_MOD << GET_CRLH_POSTION(PinConfig->PinNum));
 800080e:	7bfc      	ldrb	r4, [r7, #15]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff2f 	bl	8000678 <GET_CRLH_POSTION>
 800081a:	4603      	mov	r3, r0
 800081c:	fa04 f203 	lsl.w	r2, r4, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	431a      	orrs	r2, r3
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	601a      	str	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bd90      	pop	{r4, r7, pc}
	...

08000834 <MCAL_GPIO_GlobalInit>:
 *   @retval - none
 *   @Note - Port c and d are partial in stm32f10x8
 */

void MCAL_GPIO_GlobalInit()
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t count =0;
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
	for(count = 0; count < PinCount;count++)
 800083e:	2300      	movs	r3, #0
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e015      	b.n	8000870 <MCAL_GPIO_GlobalInit+0x3c>
	{
		MCAL_GPIO_Init(PINs_Config[count].GPIOx ,&PINs_Config[count]);
 8000844:	79fa      	ldrb	r2, [r7, #7]
 8000846:	490f      	ldr	r1, [pc, #60]	; (8000884 <MCAL_GPIO_GlobalInit+0x50>)
 8000848:	4613      	mov	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4413      	add	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	440b      	add	r3, r1
 8000852:	3304      	adds	r3, #4
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <MCAL_GPIO_GlobalInit+0x50>)
 8000862:	4413      	add	r3, r2
 8000864:	4619      	mov	r1, r3
 8000866:	f7ff ff6a 	bl	800073e <MCAL_GPIO_Init>
	for(count = 0; count < PinCount;count++)
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	3301      	adds	r3, #1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <MCAL_GPIO_GlobalInit+0x54>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	429a      	cmp	r2, r3
 8000878:	d3e4      	bcc.n	8000844 <MCAL_GPIO_GlobalInit+0x10>
	}

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000000 	.word	0x20000000
 8000888:	200000e4 	.word	0x200000e4

0800088c <MCAL_GPIO_WritePin>:
 *   @param [in] - value of type STATE_t
 *   @retval - none
 *   @Note -
 */
void MCAL_GPIO_WritePin(GPIOx_t *GPIOx, uint16_t PinNum, STATE_t value)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
 8000898:	4613      	mov	r3, r2
 800089a:	707b      	strb	r3, [r7, #1]
	if (value == HIGH)
 800089c:	787b      	ldrb	r3, [r7, #1]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d106      	bne.n	80008b0 <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |= PinNum;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68da      	ldr	r2, [r3, #12]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	431a      	orrs	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60da      	str	r2, [r3, #12]
	}
	else
	{
		GPIOx->ODR &= ~(PinNum);
	}
}
 80008ae:	e006      	b.n	80008be <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~(PinNum);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	887a      	ldrh	r2, [r7, #2]
 80008b6:	43d2      	mvns	r2, r2
 80008b8:	401a      	ands	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60da      	str	r2, [r3, #12]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <mywait>:
#include "GPIO.h"
#include "stm32f103x6.h"
#include "LCD.h"

void mywait(uint8_t x)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0; i<x; i++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	e00b      	b.n	80008f0 <mywait+0x28>
	{
		for(uint8_t j=0; j<255; j++);
 80008d8:	2300      	movs	r3, #0
 80008da:	73bb      	strb	r3, [r7, #14]
 80008dc:	e002      	b.n	80008e4 <mywait+0x1c>
 80008de:	7bbb      	ldrb	r3, [r7, #14]
 80008e0:	3301      	adds	r3, #1
 80008e2:	73bb      	strb	r3, [r7, #14]
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
 80008e6:	2bff      	cmp	r3, #255	; 0xff
 80008e8:	d1f9      	bne.n	80008de <mywait+0x16>
	for(uint8_t i=0; i<x; i++)
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	3301      	adds	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
 80008f0:	7bfa      	ldrb	r2, [r7, #15]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d3ef      	bcc.n	80008d8 <mywait+0x10>
	}

}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <RCC_Init>:

/* RCC initliztion */
void RCC_Init()
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	GPIOA_RCC_CLK_ENABLE();
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <RCC_Init+0x24>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <RCC_Init+0x24>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6193      	str	r3, [r2, #24]
	GPIOB_RCC_CLK_ENABLE();
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <RCC_Init+0x24>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <RCC_Init+0x24>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40021000 	.word	0x40021000

0800092c <main>:



int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	RCC_Init();
 8000930:	f7ff ffe8 	bl	8000904 <RCC_Init>
	MCAL_GPIO_GlobalInit();
 8000934:	f7ff ff7e 	bl	8000834 <MCAL_GPIO_GlobalInit>
	LCD_Init();
 8000938:	f7ff fd2e 	bl	8000398 <LCD_Init>
		//		{
		//			/* Multi press*/
		//			MCAL_GPIO_TogglePin(GPIOB,GPIO_PIN5);
		//		}

		LCD_WriteString("LCD ON :)",10,0,0);
 800093c:	2300      	movs	r3, #0
 800093e:	2200      	movs	r2, #0
 8000940:	210a      	movs	r1, #10
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <main+0x30>)
 8000944:	f7ff fd6f 	bl	8000426 <LCD_WriteString>
		mywait(100);
 8000948:	2064      	movs	r0, #100	; 0x64
 800094a:	f7ff ffbd 	bl	80008c8 <mywait>
		LCD_ClearDisplay();
 800094e:	f7ff fd3f 	bl	80003d0 <LCD_ClearDisplay>
		mywait(100);
 8000952:	2064      	movs	r0, #100	; 0x64
 8000954:	f7ff ffb8 	bl	80008c8 <mywait>
		LCD_WriteString("LCD ON :)",10,0,0);
 8000958:	e7f0      	b.n	800093c <main+0x10>
 800095a:	bf00      	nop
 800095c:	08000a14 	.word	0x08000a14

08000960 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000964:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800098e:	f000 f811 	bl	80009b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000992:	f7ff ffcb 	bl	800092c <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   r0, =_estack
 8000998:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80009a4:	08000a28 	.word	0x08000a28
  ldr r2, =_sbss
 80009a8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80009ac:	20000144 	.word	0x20000144

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>
	...

080009b4 <__libc_init_array>:
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	2500      	movs	r5, #0
 80009b8:	4e0c      	ldr	r6, [pc, #48]	; (80009ec <__libc_init_array+0x38>)
 80009ba:	4c0d      	ldr	r4, [pc, #52]	; (80009f0 <__libc_init_array+0x3c>)
 80009bc:	1ba4      	subs	r4, r4, r6
 80009be:	10a4      	asrs	r4, r4, #2
 80009c0:	42a5      	cmp	r5, r4
 80009c2:	d109      	bne.n	80009d8 <__libc_init_array+0x24>
 80009c4:	f000 f81a 	bl	80009fc <_init>
 80009c8:	2500      	movs	r5, #0
 80009ca:	4e0a      	ldr	r6, [pc, #40]	; (80009f4 <__libc_init_array+0x40>)
 80009cc:	4c0a      	ldr	r4, [pc, #40]	; (80009f8 <__libc_init_array+0x44>)
 80009ce:	1ba4      	subs	r4, r4, r6
 80009d0:	10a4      	asrs	r4, r4, #2
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	d105      	bne.n	80009e2 <__libc_init_array+0x2e>
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009dc:	4798      	blx	r3
 80009de:	3501      	adds	r5, #1
 80009e0:	e7ee      	b.n	80009c0 <__libc_init_array+0xc>
 80009e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009e6:	4798      	blx	r3
 80009e8:	3501      	adds	r5, #1
 80009ea:	e7f2      	b.n	80009d2 <__libc_init_array+0x1e>
 80009ec:	08000a20 	.word	0x08000a20
 80009f0:	08000a20 	.word	0x08000a20
 80009f4:	08000a20 	.word	0x08000a20
 80009f8:	08000a24 	.word	0x08000a24

080009fc <_init>:
 80009fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009fe:	bf00      	nop
 8000a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a02:	bc08      	pop	{r3}
 8000a04:	469e      	mov	lr, r3
 8000a06:	4770      	bx	lr

08000a08 <_fini>:
 8000a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0a:	bf00      	nop
 8000a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a0e:	bc08      	pop	{r3}
 8000a10:	469e      	mov	lr, r3
 8000a12:	4770      	bx	lr
